#!/bin/sh
# -*- mode: tcl; coding: utf-8 -*-
# the next line restarts using tclsh \
    exec tclsh -encoding utf-8 "$0" ${1+"$@"}
    
package require tcltest
tcltest::configure -testdir [file normalize [file dirname [info script]]]
tcltest::configure -loadfile \
    [file join [tcltest::testsDirectory] constraints.tcl]
tcltest::configure {*}$argv
tcltest::loadTestedCommands

namespace import -force tcltest::*

package require struct::list

set P mouseevent0
set type ::minhtmltk

test $P-setup setup -body {
    deleteWindows
    winfo children .
} -result ""

test $P-init load -body {
    # set abs [file normalize [info script]]
    # source [file join [file dirname [file dirname $abs]] \
    # 		[file rootname [file tail $abs]].tcl]
    set abs [file normalize [info script]]
    source [file join [file dirname [file dirname $abs]] \
		minhtmltk0.tcl]
} -result $type

namespace import ::minhtmltk::utils::*

proc iota1 {n} {
    struct::list mapfor v [struct::list iota $n] {expr {$v+1}}
}

#========================================

test $P-create "" -body {
    $type .ht -debug no
} -result .ht

#========================================
# 

incr D
test $P-$D-ready-eager "ready (eager)" -body {
    
    set ::out ""
    bind .ht <<DocumentReady>> [list set ::out READY]

    .ht configure -emit-ready-immediately yes

    .ht parse -final {
	<h2>Hello!</h2>
    }
    # Without entering eventloop.

    set ::out
} -result READY

.ht Reset
test $P-$D-ready-lazy "ready (lazy)" -body {
    
    .ht configure -emit-ready-immediately no

    set ::out ""

    .ht parse -final {
	<h2>Hello!</h2>
    }
    
    # Enter eventloop.
    update idletask; # This is required (unless -emit-ready-immediately is yes)

    set ::out
} -result READY

.ht Reset; # Note: This resets [$ht on trigger]s too!
test $P-$D-on-ready "(global) on event command" -body {

    set ::out ""
    bind .ht <<DocumentReady>> [list lappend ::out We are]
    .ht on ready [list lappend ::out READY!!!!]
    # [bind] handler and [$ht on ] handler can coexist and called in this order.

    # puts stderr handlers=[.ht node event dump-handlers]
    # puts stderr ready=[dict get [.ht node event dump-handlers] "" ready]

    .ht parse -final {
	<h2>Hello!</h2>
    }
    
    update idletask;

    set ::out
} -result {We are READY!!!!}

#========================================

proc + {a b} {expr {$a + $b}}
proc avg {a b} {expr {($a + $b)/2}}
proc center bbox {
    lassign $bbox x1 y1 x2 y2
    list [avg $x1 $x2] [avg $y1 $y2]
}

proc invokeHandlerFor {meth node} {
    # puts stderr invoking=$node,tag=[$node tag]
    lassign [center [.ht bbox $node]] cx cy
    minhtmltk::utils::adjust-coords-from [.ht html] .ht cx cy
    
    .ht $meth .ht $cx $cy
}

proc invokeClick node {
    invokeHandlerFor Press   $node
    invokeHandlerFor Release $node
}

incr D
.ht Reset
test $P-$D-click-[incr I] "on h2 click" -body {
    
    bind .ht <<DocumentReady>> {}; # Make sure previous 'ready' is removed.

    .ht parse -final {
	<h2>Hello!</h2>
    }
    
    set ::out ""
    .ht node event on h2 click {
	set ::out "Clicked!"
    }
    
    #update idletask; # Is not needed

    invokeClick [.ht search h2]

    set ::out

} -result Clicked!

#========================================

incr D
test $P-$D-parameters-[incr I] "Visible parameters in event handler" -body {
    
    set ::out ""
    .ht node event on h2 click {
	set ::out [lsort [info vars *]]
    }
    
    #update idletask; # Is not needed

    invokeClick [.ht search h2]

    set ::out

} -result [lsort {self win selfns node this args}]

#========================================

incr D
.ht Reset
test $P-$D-click-[incr I] "label click => checkbox/radio" -body {
    
    .ht parse -final {
	<form>
	<label id="lq1"><input type="radio" name="q1" value="1">radio!</label>
	<label id="lq2"><input type="checkbox" name="q2" value="2">checkbox!</label>
	</form>
    }
    
    # update idletask

    set form [.ht form get 0]

    set res {}
    lappend res [list before [$form get_all]]
    
    # puts stderr handlers=[.ht node event dump-handlers]
    foreach val {1 2} {
	set name q$val
	set id l$name
	set label [.ht search #$id]
	# puts stderr kids=[$label children]
	invokeClick [lindex [$label children] end]
    }

    lappend res [list after [$form get_all]]

} -result [list [list before []] [list after {q1 1 q2 2}]]


tcltest::cleanupTests
