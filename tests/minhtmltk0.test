#!/bin/sh
# -*- mode: tcl; coding: utf-8 -*-
# the next line restarts using tclsh \
    exec tclsh -encoding utf-8 "$0" ${1+"$@"}
    
package require tcltest
tcltest::configure -testdir [file normalize [file dirname [info script]]]
tcltest::configure -loadfile \
    [file join [tcltest::testsDirectory] constraints.tcl]
tcltest::configure {*}$argv
tcltest::loadTestedCommands

namespace import -force tcltest::*

package require struct::list

set P minhtmltk
set type ::$P

test $P-init load -body {
    set abs [file normalize [info script]]
    source [file join [file dirname [file dirname $abs]] \
		[file rootname [file tail $abs]].tcl]
} -result $type

#----------------------------------------

test $P-create "" -body {
    if {[winfo exists .ht]} { rename .ht "" }

    $type .ht -debug [::minhtmltk::utils::default \
                          ::env(DEBUG_HTMLTK_WIDGET) 0]
} -result .ht

#----------------------------------------

set C 1; set I 0

test $P-$C-[incr I]-parse "" -body {
    .ht parse -final {
        <h2>Hello</h2>
    }
    string trim [.ht state source]
} -result <h2>Hello</h2>

test $P-$C-[incr I]-selector "" -body {
    # update
    [lindex [[.ht search h2] children]] text -pre
} -result Hello

#----------------------------------------
incr C

test $P-$C-[incr I]-parse "text, password, hidden" -body {
    .ht Reset
    .ht parse -final {
        <input type="text" name="text" value="text">
        <input type="password" name="password" value="password">
        <input type="hidden" name="hidden" value="hidden">
    }

    set form [.ht form get 0]
    $form get_all
} -result [list text text password password hidden hidden]

#----------------------------------------
incr C

test $P-$C-[incr I]-parse "submit (nameless)" -body {
    .ht Reset
    .ht parse -final {
        <input name="q1">
        <input type="submit" value="Save">
    }

    set form [.ht form get 0]
    $form get_all
} -result [list q1 ""]

#----------------------------------------
incr C

test $P-$C-[incr I]-parse "named submit" -body {
    .ht Reset
    .ht parse -final {
        <input name="q1">
        <input type="submit" name="send" value="Save">
    }

    set form [.ht form get 0]
    $form get_all
} -result [list q1 "" send Save]

#----------------------------------------
incr C

test $P-$C-[incr I]-parse "buttons (named, nameless)" -body {
    .ht Reset
    .ht parse -final {
        <input name="q1">
        <input type="button" name="named" value="aaa">
        <input type="button" value="nameless">
    }

    set form [.ht form get 0]
    $form get_all
} -result [list q1 ""]

#----------------------------------------
incr C

test $P-$C-[incr I]-parse "Input without <form> is mimiced as form 0" -body {
    .ht Reset
    .ht parse -final {
        <input name="q1">
        <input name="q2">
    }
    
    set form [.ht form get 0]
    set res {}
    lappend res [$form names]
    lappend res [list q1 [$form get q1] q2 [$form get q2]]
    lappend res [$form get_all]
    set res
} -result [list [list q1 q2] \
	       [list q1 "" q2 ""] \
	       [list q1 "" q2 ""]]

#----------------------------------------
incr C

test $P-$C-[incr I]-parse "Multiple <form> without name." -body {
    .ht Reset
    .ht parse -final {
        <form>
        <input name="q1" value="x">
        <input name="q2" value="y">
        </form>
        <form>
        <input name="q1" value="A">
        <input name="q2" value="B">
        </form>
    }
    
    set res {}
    foreach form [.ht form list] {
        lappend res [$form get_all]
    }
    set res
} -result [list [list q1 x q2 y] [list q1 A q2 B]]


#----------------------------------------
incr C

test $P-$C-[incr I]-parse "Radio with value" -body {
    .ht Reset
    .ht parse -final {
        <form>
        <input type="radio" name="q1" value="1">
        <input type="radio" name="q1" value="2">
        <input type="radio" name="q1" value="3">
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res [list init [$form get_all]]

    set [$form namedvars q1 0] 3
    lappend res [list to:be:3 [$form get_all]]

    set res
} -result [list \
               [list init []] \
	       [list to:be:3 [list q1 3]] \
           ]

test $P-$C-[incr I]-parse "Radio with checked" -body {
    .ht Reset
    .ht parse -final {
        <form>
        <input type="radio" name="q1" value="1">
        <input type="radio" name="q1" value="2" checked>
        <input type="radio" name="q1" value="3">
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res [list init [$form get_all]]
    lappend res [$form get q1]

    set res
} -result [list \
               [list init [list q1 2]] \
               2 \
           ]


test $P-$C-[incr I]-parse "Radio without value" -body {
    .ht Reset
    .ht parse -final {
        <form>
        <input type="radio" name="q1">
        <input type="radio" name="q2">
        <input type="radio" name="q3">
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res init [$form get_all]
    foreach at [list 0 1 2] {
        # Directly invoke and set on.
        # set node [lindex [$item nodelist] 0]
        # puts stderr node-at:0=[$item node-at 0]=$node
        # set radio [$node replace]; # get replacement.
        # puts stderr node-widget-at:0=[$form node widget at 0]=$radio

        [$form node widget at $at] invoke
    }
    lappend res set-all [$form get_all]

    set res
} -result [list \
               init [] \
               set-all [list q1 on q2 on q3 on]\
           ]


#----------------------------------------
#----------------------------------------
incr C

test $P-$C-[incr I]-parse "Checkbox with value" -body {
    .ht Reset
    .ht parse -final {
        <form>
        <input type="checkbox" name="q1" value="1">
        <input type="checkbox" name="q1" value="2">
        <input type="checkbox" name="q1" value="3">
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res [list init [$form get_all]]

    # $item set [list 1 3]
    [$form node widget at 0] invoke
    [$form node widget at 2] invoke
    lappend res [list to:be:1,3 [$form get_all]]
    foreach i [iota1 3] {
        lappend res [list test_all q1 $i : [$form multi test_all q1 $i]]
    }
    lappend res [list test_all q1 1 2 3 : [$form multi test_all q1 1 2 3]]
    lappend res [list test_all q1 1 3 : [$form multi test_all q1 1 3]]
    lappend res [list test_all q1 1 2 : [$form multi test_all q1 1 2]]

    # clear 1, 3
    [$form node widget at 0] invoke
    [$form node widget at 2] invoke
    lappend res [list "cleared-again" [$form get_all]]

    set res
} -result [list \
               [list init []] \
               [list "to:be:1,3" [list q1 [list 1 3]]] \
               [list test_all q1 1 : 1] \
               [list test_all q1 2 : 0] \
               [list test_all q1 3 : 1] \
               [list test_all q1 1 2 3 : 0] \
               [list test_all q1 1 3 : 1] \
               [list test_all q1 1 2 : 0] \
               [list "cleared-again" []] \
           ]

test $P-$C-[incr I]-parse "Checkbox item set {1 3}" -body {
    set res ""
    $form set q1 [list 1 3]
    lappend res [list to:be:1,3 [$form get_all]]
    lappend res [list [$form get q1 missing] [$form get q1]]
} -result [list \
               [list "to:be:1,3" [list q1 [list 1 3]]] \
               [list 2 [list 1 3]] \
              ]


#----------------------------------------
incr C

test $P-$C-[incr I]-parse "Checkbox with checked" -body {
    .ht Reset
    .ht parse -final {
        <form>
        <input type="checkbox" name="q1" value="1" checked>
        <input type="checkbox" name="q1" value="2">
        <input type="checkbox" name="q1" value="3" checked>
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res [list init [$form get_all]]

    # $item set [list 1 3]
    [$form node widget at 0] invoke
    [$form node widget at 2] invoke
    lappend res [list to:be:empty [$form get_all]]

    # clear 1, 3
    [$form node widget at 0] invoke
    [$form node widget at 2] invoke
    lappend res [list "set-again" [$form get_all]]

    set res
} -result [list \
               [list init [list q1 [list 1 3]]] \
	       [list "to:be:empty" []] \
               [list "set-again" [list q1 [list 1 3]]] \
           ]


#----------------------------------------
incr C

test $P-$C-[incr I]-parse "select single" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<select name="q1">
	<option value="">Please choose from followings:</option>
	<option value="1">Apple</option>
	<option value="2">Orange</option>
	<option value="3">Strawberry</option>
	<option value="4">Lemon</option>
	<option value="5">Banana</option>
	</select>
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res [list init [$form get_all]]

    $form set q1 3

    lappend res [list to:be:3 [$form get_all]]

    set res
} -result [list \
               [list init [list q1 ""]] \
               [list to:be:3 [list q1 3]] \
           ]

test $P-$C-[incr I]-parse "empty select single" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<select name="q1"></select>
        </form>
    }
    .ht error get
} -result []

test $P-$C-[incr I]-parse "empty option in select single" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<select name="q1">
        <option></option>
        <option>one</option>
        <option value="2">two</option>
        </select>
        </form>
    }
    set res [list [.ht error get]]
    set form [.ht form get 0]
    lappend res [$form choicelist q1]
    set res
} -result [list \
               [] \
               [list "" one 2] \
              ]

test $P-$C-[incr I]-parse "Empty value can be selected correctly" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<select name="q1">
        <option value="">Choose!</option>
        <option value=1>one</option>
        <option value=2>two</option>
        <option value=3>three</option>
        </select>
        </form>
    }
    set res []
    set node [.ht search select]
    set m [[$node replace] cget -menu]
    set form [.ht form get 0]
    set var [$form node var $node]
    lappend res [list {*}[$form get_all] [set $var]]

    $m invoke 3
    # update
    lappend res [list {*}[$form get_all] [set $var]]
    $m invoke 0
    # update
    lappend res [list {*}[$form get_all] [set $var]]

} -result [list \
               [list q1 {} {}] \
               [list q1 3 3] \
               [list q1 {} {}] \
              ]

#========================================

test $P-$C-[incr I]-parse "select multi" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<select name="q1" multi>
	<option value="">Please choose from followings:</option>
	<option value="1">Apple</option>
	<option value="2">Orange</option>
	<option value="3">Strawberry</option>
	<option value="4">Lemon</option>
	<option value="5">Banana</option>
	</select>
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res [list init [$form get_all]]

    $form set q1 [list 1 4 5]

    lappend res [list to:be:1,4,5 [$form get_all]]

    set res
} -result [list \
               [list init []] \
               [list to:be:1,4,5 [list q1 [list 1 4 5]]] \
           ]

test $P-$C-[incr I]-parse "empty select multi" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<select name="q1" multi></select>
        </form>
    }
    .ht error get
} -result []


#----------------------------------------
incr C

test $P-$C-[incr I]-parse "textarea" -body {
    .ht Reset
    .ht parse -final {
        <form>
	<textarea name="q1">foobar</textarea>
        </form>
    }
    
    set form [.ht form get 0]

    set res []
    lappend res init [$form get_all]

    $form set q1 3

    lappend res to:be:3 [$form get_all]

    set res
} -result [list \
               init [list q1 foobar] \
               to:be:3 [list q1 3] \
           ]

tcltest::cleanupTests
