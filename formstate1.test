#!/bin/sh
# -*- mode: tcl; coding: utf-8 -*-
# the next line restarts using tclsh \
    exec tclsh -encoding utf-8 "$0" ${1+"$@"}
    
package require tcltest
namespace import tcltest::test

package require struct::list

set P formstate1
set type ::minhtmltk::formstate

test $P-init load -body {
    source [file rootname [info script]].tcl
} -result $type

proc iota1 {n} {
    struct::list mapfor v [struct::list iota $n] {expr {$v+1}}
}

#========================================
set t_nodes {}
set t_names {}
set t_pairs {}
set i 0

test $P-create "" -body {
    set form [$type %AUTO%]
    list [$form cget -name] [$form cget -action] [$form cget -node] \
        [$form names] [$form node serialize]
} -result [list "" "" "" "" ""]

#========================================
# Underlying [$form node *] intefaces

#----------------------------------------
# single
#
incr D
set name ss1
lappend t_names $name
foreach value [list 1 2 3] {

    test $P-node-add-single-value=$value "\$form node add single name=$name value=$value" -body {
	set node node-$name-[incr i]
	$form node add single  \
	    $node [list name $name value $value]
    } -match regexp -result {^::minhtmltk::formstate::Snit_inst\d+::_S\d+$}

    lappend t_nodes $node
    lappend t_pairs $name $value

    test $P-node-dict-get-[incr i] "\$form node dict get" -body {
	set res ""
	foreach k [list name value is_array] {
	    lappend res [$form node dict get $node $k]
	}
	set res
    } -result [list ss1 $value 0]
}

test $P-name-[incr i] "" -body {
    set res {}
    lappend res [$form names]
    lappend res [$form choicelist $name]
    lappend res [$form node serialize $t_nodes]
    set res
} -result [list [list $name] [list 1 2 3] []]


#----------------------------------------
# multi

incr D
set name mm1
lappend t_names $name
foreach value [list 1 2 3] {

    test $P-node-add-multi-value=$value "\$form node add multi name=$name value=$value" -body {
	set node node-$name-[incr i]
	$form node add multi  \
	    $node [list name $name value $value]
    } -match regexp -result {^::minhtmltk::formstate::Snit_inst\d+::_M\d+\(\d+\)$}

    lappend t_nodes $node
    lappend t_pairs $name $value
    
    test $P-node-dict-get-[incr i] "\$form node dict get" -body {
	set res ""
	foreach k [list name value is_array] {
	    lappend res [$form node dict get $node $k]
	}
	set res
    } -result [list $name $value 1]
}

test $P-name-[incr i] "" -body {
    set res {}
    lappend res [$form names]
    lappend res [$form choicelist $name]
    lappend res [$form node serialize $t_nodes]
    set res
} -result [list $t_names [list 1 2 3] []]

#----------------------------------------
# text

incr D
set name tt1
lappend t_names $name
foreach value [list foo bar baz] {

    test $P-node-add-text-value=$value "\$form node add text name=$name value=$value" -body {
	set node node-$name-[incr i]
	$form node add text  \
	    $node [list name $name value $value]
    } -match regexp -result {^::minhtmltk::formstate::Snit_inst\d+::_T\d+$}

    lappend t_nodes $node
    lappend t_pairs $name $value
    
    test $P-node-dict-get-[incr i] "\$form node dict get" -body {
	set res ""
	foreach k [list name value is_array] {
	    lappend res [$form node dict get $node $k]
	}
	set res
    } -result [list $name $value 0]
}

test $P-name-[incr i] "" -body {
    set res {}
    lappend res [$form names]
    lappend res [$form choicelist $name]
    lappend res [$form node serialize $t_nodes]
    set res
} -result [list $t_names [] [list $name foo $name bar $name baz]]

test $P-set-serialize-[incr i] "" -body {
    set [lindex [$form namedvars ss1] 0] 2
    set [lindex [$form namedvars mm1] 0] 1
    set [lindex [$form namedvars tt1] 0] FOO
    $form node serialize $t_nodes
} -result [list ss1 2 mm1 [list 1] \
	       $name FOO $name bar $name baz]

test $P-set-serialize-[incr i] "" -body {
    unset [lindex [$form namedvars ss1] 0]
    unset [lindex [$form namedvars mm1] 0]
    unset [lindex [$form namedvars tt1] 0]; # XXX: Unrealistic.
    $form node serialize $t_nodes
} -result [list $name bar $name baz]


# #========================================

# set value dval[incr d]
# test $P-item-text-[incr i] "" -body {
    
#     set name dummy$d
#     set node node-$name
#     $form node add single  \
# 	$node [list name $name value ""]
    
#     set res ""
#     lappend res [$form get $name]
#     lappend res [$form get $name outval]
#     lappend res [info exists outval]
# } -result [list "" 1 1]

# lappend t_names $name
# #----------------------------------------


# test $P-item-text-[incr i] "" -body {
#     $item set foo
#     $form get $name
# } -result foo


# test $P-item-text-[incr i] "" -body {
#     $item set bar
#     set rc [$form get $name outval]
#     list $rc $outval
# } -result [list 1 bar]

# lappend t_pairs $name bar
# #----------------------------------------

# incr d
# test $P-item-radio-[incr i] "" -body {
    
#     set name dummy$d
    
#     set result {}
#     for {set i 1} {$i <= 3} {incr i} {
#         set item [$form node add single  \
#                       node-$name [list name $name value $i has-choice yes]]
#     }
    
#     $form get $name outval
# } -result 0

# lappend t_names $name
# #----------------------------------------

# test $P-item-radio-[incr i] "" -body {
    
#     set result {}
#     for {set i 1} {$i <= 3} {incr i} {
#         $item set $i
#         lappend result [list [$form get $name v] $v]
#     }
#     set result
# } -result {{1 1} {1 2} {1 3}}

# lappend t_pairs $name 3
# #----------------------------------------

# incr d
# test $P-item-checkbox-[incr i] "" -body {
    
#     set name dummy$d
    
#     set result {}
#     for {set i 1} {$i <= 3} {incr i} {
#         set item [$form node add multi  \
#                       node-$name [list name $name value $i has-choice yes]]
#     }
    
#     $form get $name outval
# } -result 0

# lappend t_names $name
# #----------------------------------------

# test $P-item-checkbox-[incr i] "" -body {
    
#     set result {}
#     for {set i 1} {$i <= 3} {incr i} {
#         $item set [iota1 $i]
#         lappend result [$form get $name]
#     }
#     set result
# } -result {1 {1 2} {1 2 3}}

# lappend t_pairs $name {1 2 3}
# #----------------------------------------

# test $P-item-checkbox-[incr i] "" -body {
#     $form get_all
# } -result $t_pairs
